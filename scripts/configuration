#!/usr/bin/env bash
fstab() {
    debug $DEBUG_INFO "Starting fstab generation"
    printf "%s\n" "${bold}Generating fstab"

    (
        echo "# Creating /etc directory..."
        echo "10"
        mkdir -p "$INST_MNT/etc" >> "$LOG_FILE" 2>&1 || error "Failed to create /etc directory!"
        
        if [[ $FILESYSTEM == "btrfs" || $FILESYSTEM == "xfs" || $FILESYSTEM == "ext4" ]]; then
            echo "# Generating fstab with UUIDs..."
            echo "50"
            fstabgen -U "$INST_MNT" >> "$INST_MNT/etc/fstab" 2>> "$LOG_FILE"
        elif [[ $FILESYSTEM == "zfs" ]]; then
            echo "# Adding EFI partition to fstab..."
            echo "50"
            echo "UUID=$(blkid -s UUID -o value ${DISK}-part1) /boot/efi vfat umask=0022,fmask=0022,dmask=0022 0 1" >> "$INST_MNT/etc/fstab" 2>> "$LOG_FILE"
            
            echo "# Adding swap partition to fstab..."
            echo "90"
            echo "UUID=$(blkid -s UUID -o value ${DISK}-part3) none swap defaults 0 0" >> "$INST_MNT/etc/fstab" 2>> "$LOG_FILE"
        fi
        echo "100"
    ) | yad --progress \
        --title="fstab Generation" \
        --text="Generating fstab..." \
        --width=400 \
        --height=100 \
        --auto-close \
        --auto-kill \
        --percentage=0

    # Verify fstab
    debug $DEBUG_DEBUG "Verifying fstab file"
    if [[ ! -f "$INST_MNT/etc/fstab" ]]; then
        debug $DEBUG_ERROR "fstab file not created"
        error "Error generating fstab!"
    fi

    if [[ ! -s "$INST_MNT/etc/fstab" ]]; then
        debug $DEBUG_ERROR "fstab file is empty"
        error "Generated fstab is empty!"
    fi

    debug $DEBUG_INFO "fstab generation completed successfully"
    printf "%s\n" "${bold}fstab generated successfully!"


    yad --info \
        --title="fstab Generation" \
        --text="fstab generated successfully!" \
        --width=300
}

configure_initramfs() {
    debug $DEBUG_INFO "Starting initramfs configuration"
    printf "%s\n" "${bold}Configuring initramfs..."

    (
        echo "# Configuring initramfs..."
        echo "10"
        
        if [[ $FILESYSTEM == "zfs" ]]; then
            echo "# Backing up mkinitcpio.conf..."
            echo "30"
            mv $INST_MNT/etc/mkinitcpio.conf $INST_MNT/etc/mkinitcpio.conf.back >> "$LOG_FILE" 2>&1
            
            echo "# Writing ZFS configuration..."
            echo "50"
            tee $INST_MNT/etc/mkinitcpio.conf >> "$LOG_FILE" 2>&1 <<EOF
HOOKS=(base udev autodetect modconf block keyboard zfs filesystems)
EOF
        fi

        echo "# Regenerating initramfs..."
        echo "80"
        artix-chroot $INST_MNT /bin/bash -c "mkinitcpio -P" >> "$LOG_FILE" 2>&1
        echo "100"
    ) | yad --progress \
        --title="Initramfs Configuration" \
        --text="Configuring initramfs..." \
        --width=400 \
        --height=100 \
        --auto-close \
        --auto-kill \
        --percentage=0

    if [[ $? -ne 0 ]]; then
        debug $DEBUG_ERROR "initramfs regeneration failed"
        error "Error regenerating initramfs!"
    fi

    debug $DEBUG_INFO "initramfs configuration completed"
    printf "%s\n" "${bold}Initramfs configuration completed successfully!"
}


finishtouch() {
    debug $DEBUG_INFO "Starting final system configuration"
    printf "%s\n" "${bold}Finalizing base installation"

    # Start the progress bar
    (
        if [[ -n "$LOCALE" ]]; then
            debug $DEBUG_INFO "Using provided locale: $LOCALE"
            echo "$LOCALE UTF-8" >> $INST_MNT/etc/locale.gen
            echo "LANG=$LOCALE" > $INST_MNT/etc/locale.conf
        else
            debug $DEBUG_DEBUG "Getting locale list"
            locale_list=$(grep -v '^#' /usr/share/i18n/SUPPORTED | cut -d' ' -f1 | sort -u)
            
            selected_locale=$(echo "$locale_list" | yad --list \
                --title="Locale Selection" \
                --text="Choose your locale:" \
                --width=400 \
                --height=400 \
                --column="Locale" \
                --search-column=1 \
                --separator="" \
                --button="Cancel:1" \
                --button="Select:0")

            if [[ -n "$selected_locale" ]]; then
                debug $DEBUG_INFO "Setting locale: $selected_locale"
                echo "$selected_locale UTF-8" >> $INST_MNT/etc/locale.gen
                echo "LANG=$selected_locale" > $INST_MNT/etc/locale.conf
            fi
        fi
        echo "30"
        
        debug $DEBUG_DEBUG "Configuring locale settings"
        echo "en_US.UTF-8 UTF-8" >> $INST_MNT/etc/locale.gen 2>> "$LOG_FILE"
        debug $DEBUG_DEBUG "Running locale-gen"
        artix-chroot $INST_MNT /bin/bash -c locale-gen >> "$LOG_FILE" 2>&1 && echo "100"
    ) | yad --progress \
        --title="System Configuration" \
        --text="Finalizing base installation..." \
        --width=400 \
        --height=100 \
        --auto-close \
        --auto-kill \
        --percentage=0

    if [[ $? -ne 0 ]]; then
        debug $DEBUG_ERROR "Failed to complete base system configuration"
        error "Failed to complete base system configuration!"
    fi

    debug $DEBUG_INFO "Base system configuration completed"
    printf "%s\n" "${bold}Base system configuration completed successfully!"
}

prepare_chroot() {
    debug $DEBUG_INFO "Starting chroot environment preparation"
    printf "%s\n" "${bold}Preparing chroot environment"

    # Get paths for required files
    local pkglists
    local services_dir
    local zfs_openrc
    local chroot_script
    
    # Initialize paths with proper error checking
    pkglists=$(get_script_path "pkglist-*.txt" "misc") || error "Failed to find package list"
    services_dir=$(get_script_path "services" "misc") || error "Failed to find services directory"
    chroot_script=$(get_script_path "artix-chrooting" "scripts") || error "Failed to find chroot script"
    zfs_openrc=$(get_script_path "zfs-openrc-20241023-1-any.pkg.tar.zst" "misc") || error "Failed to find ZFS OpenRC package"

    # Verify paths exist before proceeding
    debug $DEBUG_DEBUG "Verifying paths..."
    debug $DEBUG_DEBUG "Package lists: $pkglists"
    debug $DEBUG_DEBUG "Services dir: $services_dir"
    debug $DEBUG_DEBUG "Chroot script: $chroot_script"
    debug $DEBUG_DEBUG "ZFS OpenRC package: $zfs_openrc"

    [ ! -f "$pkglists" ] && error "Package list not found at: $pkglists"
    [ ! -f "$chroot_script" ] && error "Chroot script not found at: $chroot_script"
    [ ! -d "$services_dir" ] && error "Services directory not found at: $services_dir"
    [ ! -f "$zfs_openrc" ] && error "ZFS OpenRC package not found at: $zfs_openrc"

    # Start the progress bar
    (
        echo "# Creating installation directories..."
        echo "10"
        debug $DEBUG_DEBUG "Creating installation directories"
        mkdir -p "$INST_MNT/install/services" >> "$LOG_FILE" 2>&1 || error "Failed to create directories!"
        
        debug $DEBUG_DEBUG "Copying package lists"
        cp "$pkglists" "$INST_MNT/install/" >> "$LOG_FILE" 2>&1 || error "Failed to copy package list!"
        echo "30"
        
        debug $DEBUG_DEBUG "Copying service files"
        cp -r "$services_dir"/* "$INST_MNT/install/services/" >> "$LOG_FILE" 2>&1 || error "Failed to copy service files!"
        echo "60"

        if [[ $FILESYSTEM == "zfs" ]]; then
            debug $DEBUG_DEBUG "Looking for ZFS OpenRC package"
            local misc_dir=$(dirname "$pkglists")
            zfs_openrc=$(find "$misc_dir" -name "zfs-openrc-20241023-1-any.pkg.tar" -type f | head -n 1)
            
            if [[ -z "$zfs_openrc" ]]; then
                error "ZFS OpenRC package not found!"
            fi
            
            debug $DEBUG_DEBUG "Copying ZFS OpenRC package: $(basename "$zfs_openrc")"
            cp "$zfs_openrc" "$INST_MNT/install/" >> "$LOG_FILE" 2>&1 || error "Failed to copy ZFS OpenRC package!"
        fi
        echo "80"

        debug $DEBUG_DEBUG "Copying chroot script"
        cp "$chroot_script" "$INST_MNT/install/artix-chrooting" >> "$LOG_FILE" 2>&1 || error "Failed to copy chroot script!"
        chmod +x "$INST_MNT/install/artix-chrooting" >> "$LOG_FILE" 2>&1 || error "Failed to set execute permission!"

        debug $DEBUG_DEBUG "Creating environment file"
        echo "TIMEZONE=$TIMEZONE" > "$INST_MNT/install/chroot.env" 2>> "$LOG_FILE" || error "Failed to create environment file!"
        echo "100"
    ) | yad --progress \
        --title="Chroot Preparation" \
        --text="Preparing chroot environment..." \
        --width=400 \
        --height=100 \
        --auto-close \
        --auto-kill \
        --percentage=0

    if [[ $? -ne 0 ]]; then
        debug $DEBUG_ERROR "Failed to prepare chroot environment"
        error "Failed to prepare chroot environment!"
    fi

    debug $DEBUG_INFO "Chroot environment prepared successfully"
    printf "%s\n" "${bold}Chroot environment prepared successfully!"
}

run_chroot() {
    printf "%s\n" "${bold}Running chroot script"
    artix-chroot $INST_MNT /bin/bash -c "source /install/chroot.env && /install/artix-chrooting"
    printf "%s\n" "${bold}Chroot script executed successfully!"
}